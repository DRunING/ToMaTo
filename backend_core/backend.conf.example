# ToMaTo hostmanager config file 

# Authentication plugins
#  A list of authentication plugins that should be tried to login users.

# This line is needed to remove the default plugins
AUTH = []

AUTH.append ({
	"name": "",
	"provider": "internal",
	"options": {
			"password_timeout": None,
			"account_timeout": 60*60*24*365*5, # 5 years
			"allow_registration": True,
			"default_flags": ["over_quota", "new_account"]
	}
})

# Htpasswd auth provider
#  This auth provider uses a .htpasswd file as an authentication backend.
#  It reads the user credentials from the given file and compares the them to
#  the given login credentials. If the credentials match to a user in the
#  file, the given flags are assigned to that user.
#
#  Note: .htpasswd files can be created and manipulated using the htpasswd command
#
#  The auth provider takes the following options:
#    file: The path of the .htpasswd file
#    flags: The flags that an authorized user should get
#    organization: The organization that the users belong to
#
#AUTH.append({
#	"name": "htpasswd",
#	"provider": "htpasswd",
#	"options": {
#		"file": "/etc/tomato/users.passwd",
#		"flags": [],
#       "organization": ""
#	}
#})


# LDAP auth provider
#  This auth provider uses LDAP as an authentication backend.
#  The LDAP server can be configured with the server_uri option. If the server
#  uses SSL, the server_cert option can be used to configure the public server
#  certificate.
#  In the first authentication step a connection is established to the server
#  using bind_dn and bind_pw to check that the user exists below the given 
#  identity_base path and read the user properties.
#  If the user exists, a direct connection is established to the server using
#  the determined user DN and the login password to check the password.
#  If the password is correct, some more queries are made on the server to get 
#  the members of the given groups and check if the user DN is if listed as a 
#  member of these groups.
#
#  The auth provider takes the following options:
#    server_uri: The URI of the server. This normally starts with ldap:// or
#                ldaps://, which determines the usage of SSL.
#    server_cert: The location of the server certificate to use for SSL
#    bind_dn: The DN of a bind user to check the username
#    bind_pw: The password of the bind user
#    identity_base: The base path for all identities
#    groups: This is a dict structure that assigns an array of flags (values)
#            to LDAP group names (keys).
#    organization: The organization that the users belong to
#
#AUTH.append({
#    "name": "glab_ldap",
#    "provider": "ldap",
#    "options": {
#        "bind_dn": "cn=ukl.netman,ou=system,dc=german-lab,dc=de", 
#        "bind_pw": "---",
#        "server_uri": "ldaps://glab-ldap.german-lab.de:636",
#        "server_cert": "/etc/ldap/certs/cacert.pem",
#        "identity_base": "ou=identities,dc=german-lab,dc=de",
#        "groups": {
#            "cn=users,ou=projectstructure,ou=groups,dc=german-lab,dc=de": [],
#            "cn=tomato,ou=management,ou=groups,dc=german-lab,dc=de": ["admin"]
#        },
#        "organization": ""
#    }
#})


# SQL auth provider
#  This auth provider uses SQL as an authentication backend. It executes an
#  SQL query to check the user credentials and accepts the login if the query
#  result contains at least one row.
#  In the queries, the keywords :username and :password will be substituted by
#  the login credentials.
#  Before checking the credentials the password is first converted using a 
#  given hash function. If the hash option is set to None or False, the raw
#  password will be checked against the database.
#
#  Note: To use an additional database for this provider the database can be
#    configured via DATABASES. Only the entry named default will be used
#    by ToMaTo itself, the other databases can be used for authentication
#    or other modules.
#
#  The auth provider takes the following options:
#    query: An SQL query to use to check for a user in the database.
#    database: The database backend to use, as configured in the config
#              in DATABASES, defaults to "default"
#    hash: The hash method use for passwords, defaults to "sha1"
#    flags: The flags that an authorized user should get
#    organization: The organization that the users belong to
#
#AUTH.append({
#    "name": "sql",
#    "provider": "sql",
#    "options": {
#        "database": "users",
#        "query": "SELECT * FROM users WHERE username = :username and password = :password", 
#        "hash": "sha1",
#        "flags": [],
#        "organization": ""
#    }
#})

# Planetlab auth provider
#  This auth provider uses a Planetlab server as an authentication backend.
#  It uses the login credentials to login to the given server and to read the
#  user data if he exists.
#  If the site_filter is given only users of these sites will be allowed.
#	
#  The auth provider takes the following options:
#    api_uri: The PLCAPI URI, i.e.: https://host:port/PLCAPI/
#    site_filter: A site abbreviation or list of site abbreviations to allow
#                 access.
#    roles: This is a dict structure that assigns an array of flags (values)
#           to PlanetLab roles (keys).
#    organization: The organization that the users belong to
#
#AUTH.append({
#    "name": "planetlab",
#    "provider": "planetlab",
#    "options": {
#        "api_uri": "https://www.planet-lab.org/PLCAPI/", 
#        "site_filter": None,
#        "roles": {
#            "user": [],
#        },
#        "organization": ""
#    }
#})


# Ticket auth provider
#  This auth provider uses a ticket mechanism for authentication.
#  With this auth provider arbitrary users will be accepted as long as their
#  password consists of a valid user ticket or admin ticket.
#  Tickets are calculated as a hash value of the username together with a 
#  secret key.		TICKET = hash(USERNAME + SECRET)
#  The hash algorithm that should be used can be configured.
#
#  Security note: Anyone that has access to either secret key can create
#                 valid login tickets arbitrarily.
#
#  The auth provider takes the following options:
#    secret: The secret key to use for user login, default to None
#    hash: The hash method use for passwords, defaults to "sha1"
#    flags: The flags that an authorized user should get
#    organization: The organization that the users belong to
#
#AUTH.append({
#    "name": "ticket",
#    "provider": "ticket",
#    "options": {
#        "secret": "secret",
#        "organization": ""
#    }
#})

# File where the SSL certificate and private key of this backend are stored
CERTIFICATE = "/etc/tomato/backend.pem"

# Configuration for the XML-RPC server
# PORT: Which TCP port to use
# SSL: Whether to use SSL
# SSL_OPTS: Private and CA key file if SSL is being used
SERVER = []

SERVER.append({
	"PORT": 8000,
	"SSL": True,
	"SSL_OPTS": {
		"cert_file" : "/etc/tomato/server.cert",
		"key_file": "/etc/tomato/server.cert",
	}
})

SERVER.append({
	"PORT": 8001,
	"SSL": False
})


# See the django database manual for help
DATABASES = {}

DATABASES['default'] = {
	'ENGINE': 'django.db.backends.postgresql_psycopg2',
	'NAME': 'tomato'
}


# Main log file
LOG_FILE = "/var/log/tomato/main.log"

TEMPLATE_PATH = "/var/lib/tomato/templates"
TRACKER_PORT = 8002
BITTORRENT_RESTART = 60 * 30

HOST_UPDATE_INTERVAL = 60
RESOURCES_SYNC_INTERVAL = 600

EMAIL_FROM = "ToMaTo backend <tomato@localhost>"
EMAIL_SUBJECT_TEMPLATE = "[ToMaTo] %(subject)s"
EMAIL_MESSAGE_TEMPLATE = "Dear %(realname)s,\n\n%(message)s\n\n\nSincerely,\n  your ToMaTo backend"

# Django mail config
#EMAIL_HOST = ""
#EMAIL_PORT =
#EMAIL_HOST_USER =
#EMAIL_HOST_PASSWORD =
#EMAIL_USE_TLS